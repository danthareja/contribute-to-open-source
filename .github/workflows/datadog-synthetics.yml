# This workflow will trigger Datadog Synthetic tests within your Datadog organisation
# For more information on running Synthetic tests within your GitHub workflows see: https://docs.datadoghq.com/synthetics/cicd_integrations/github_actions/

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# To get started:

# 1. Add your Datadog API (DD_API_KEY) and Application Key (DD_APP_KEY) as secrets to your GitHub repository. For more information, see: https://docs.datadoghq.com/account_management/api-app-keys/.
# 2. Start using the action within your workflow

name: Run Datadog Synthetic tests

on:
  [push, pull_request]:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 10  # Abort if the job takes more than 10 minutes

    steps:
      - uses: actions/checkout@v3  # Using the latest version

      # Optional step to install dependencies
      - name: Install Dependencies
        run: npm install

      # Run Datadog Synthetic tests
      - name: Run Datadog Synthetic tests
        uses: DataDog/synthetics-ci-github-action@v1.4.0  # Clean versioning
        with:
          api_key: ${{secrets.DD_API_KEY}}
          app_key: ${{secrets.DD_APP_KEY}}
          test_search_query: 'tag:e2e-tests'

      # Add a simple test summary step
      - name: Test Summary
        run: echo "Test Completed. Check Datadog dashboard for results."
        
# Benefits of Refactoring:
# Consistency: Versioning and triggers are consistent and easier to maintain.
# Simplified triggers: Combined push and pull_request triggers.
# Timeout protection: Ensures the job doesnâ€™t hang for too long.
# Better versioning: Using explicit version numbers makes it more readable and maintainable.
# Parallel jobs: If needed, you can expand it for parallel testing jobs, improving efficiency.


